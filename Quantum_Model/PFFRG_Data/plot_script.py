import numpy as np
import math
import matplotlib.pyplot as plt
import matplotlib
import os
from  matplotlib.colors import LinearSegmentedColormap

# These lines are needed to set the right font for the plots
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'

ticksFont = 'STIXGeneral'

def writedat(filename, x, y, xprecision=8, yprecision=8):
    with open(filename, 'w') as f:
        for a, b in zip(x, y):
            print("%.*g\t%.*g" % (xprecision, a, yprecision, b), file=f)
            # or, using the new-style formatting:
            # print("{1:.{0}g}\t{3:.{2}g}".format(xprecision, a, yprecision, b), file=f)


# Obtain the position of a specified Lambda in the Lambda array
def getNLam(lam, lamArray):
    for i in range(len(values)):
        lami = lamArray[i][0]
        if lami < lam:
            if i == 0:
                return 0
            print("Considering Lambda at array position " + str(i - 1))
            return i - 1
    print("Considering Lambda at array position " + str(len(values) - 1))
    return len(values) - 1


pi = np.pi

LamRange = 1
YRange = 10



path = 'path/to/files'

Nw = 32

filenameLams = path + 'Pyrochlore_N' + str(Nw) + '_L1_Lams.txt'
filename = path + 'Pyrochlore_N' + str(Nw) + '_L133.txt'


# Paths to all nine spin correlations
pcString = 'Pyrochlore_N' + str(Nw)
filenameMat = [[path + pcString + '_L111.txt', path + pcString + '_L112.txt', path + pcString + '_L113.txt'],
               [path + pcString + '_L121.txt', path + pcString + '_L122.txt', path + pcString + '_L123.txt'],
               [path + pcString + '_L131.txt', path + pcString + '_L132.txt', path + pcString + '_L133.txt']
               ]



fobj = open(filename)
fobjLams = open(filenameLams)

values = [[float(part) for part in line.split()] for line in fobj]
lams = [[float(part) for part in line.split()] for line in fobjLams]

L = getNLam(0, lams)

valuesMat = [
    [[[float(part) for part in line.split()] for line in open(filenameMat[0][0])],
     [[float(part) for part in line.split()] for line in open(filenameMat[0][1])],
     [[float(part) for part in line.split()] for line in open(filenameMat[0][2])]],
    [[[float(part) for part in line.split()] for line in open(filenameMat[1][0])],
     [[float(part) for part in line.split()] for line in open(filenameMat[1][1])],
     [[float(part) for part in line.split()] for line in open(filenameMat[1][2])]],
    [[[float(part) for part in line.split()] for line in open(filenameMat[2][0])],
     [[float(part) for part in line.split()] for line in open(filenameMat[2][1])],
     [[float(part) for part in line.split()] for line in open(filenameMat[2][2])]],
]

#199 vectors with distances of up to four nearest neighbors spacings
LatticeVectors = [[-1.250000, 0.000000, -0.250000], [-1.250000, 0.250000, -0.500000], [-1.250000, 0.500000, 0.250000],
                  [-1.000000, 0.000000, -1.000000], [-0.750000, 0.000000, -0.750000], [-0.750000, 0.250000, -1.000000],
                  [-1.000000, 0.250000, -0.750000], [-1.000000, 0.500000, -0.500000], [-0.750000, 0.500000, -0.250000],
                  [-0.750000, 0.750000, -0.500000], [-1.000000, 0.750000, -0.250000], [-1.000000, 1.000000, 0.000000],
                  [-0.750000, 1.000000, 0.250000], [-0.250000, 0.000000, -1.250000], [-0.500000, 0.250000, -1.250000],
                  [-0.500000, 0.500000, -1.000000], [-0.250000, 0.500000, -0.750000], [-0.250000, 0.750000, -1.000000],
                  [-0.500000, 0.750000, -0.750000], [-0.500000, 1.000000, -0.500000], [-0.250000, 1.000000, -0.250000],
                  [-0.250000, 1.250000, -0.500000], [-0.500000, 1.250000, -0.250000], [0.250000, 0.500000, -1.250000],
                  [0.000000, 1.000000, -1.000000], [0.250000, 1.000000, -0.750000], [-1.250000, -0.500000, 0.250000],
                  [-1.250000, -0.250000, 0.000000], [-1.250000, 0.250000, 0.500000], [-1.000000, -0.500000, -0.500000],
                  [-0.750000, -0.500000, -0.250000], [-0.750000, -0.250000, -0.500000],
                  [-1.000000, -0.250000, -0.250000], [-1.000000, 0.000000, 0.000000], [-0.750000, 0.000000, 0.250000],
                  [-0.750000, 0.250000, 0.000000], [-1.000000, 0.250000, 0.250000], [-1.000000, 0.500000, 0.500000],
                  [-0.750000, 0.500000, 0.750000], [-0.750000, 0.750000, 0.500000], [-0.500000, -0.500000, -1.000000],
                  [-0.250000, -0.500000, -0.750000], [-0.250000, -0.250000, -1.000000],
                  [-0.500000, -0.250000, -0.750000], [-0.500000, 0.000000, -0.500000], [-0.250000, 0.000000, -0.250000],
                  [-0.250000, 0.250000, -0.500000], [-0.500000, 0.250000, -0.250000], [-0.500000, 0.500000, 0.000000],
                  [-0.250000, 0.500000, 0.250000], [-0.250000, 0.750000, 0.000000], [-0.500000, 0.750000, 0.250000],
                  [-0.500000, 1.000000, 0.500000], [-0.250000, 1.000000, 0.750000], [-0.250000, 1.250000, 0.500000],
                  [0.250000, -0.500000, -1.250000], [0.000000, -0.250000, -1.250000], [0.000000, 0.000000, -1.000000],
                  [0.250000, 0.000000, -0.750000], [0.250000, 0.250000, -1.000000], [0.000000, 0.250000, -0.750000],
                  [0.000000, 0.500000, -0.500000], [0.250000, 0.500000, -0.250000], [0.250000, 0.750000, -0.500000],
                  [0.000000, 0.750000, -0.250000], [0.000000, 1.000000, 0.000000], [0.250000, 1.000000, 0.250000],
                  [0.250000, 1.250000, 0.000000], [0.000000, 1.250000, 0.250000], [0.500000, 0.250000, -1.250000],
                  [0.500000, 0.500000, -1.000000], [0.750000, 0.500000, -0.750000], [0.500000, 0.750000, -0.750000],
                  [0.500000, 1.000000, -0.500000], [0.750000, 1.000000, -0.250000], [0.500000, 1.250000, -0.250000],
                  [-1.000000, -1.000000, 0.000000], [-0.750000, -1.000000, 0.250000], [-0.750000, -0.750000, 0.000000],
                  [-1.000000, -0.750000, 0.250000], [-1.000000, -0.500000, 0.500000], [-0.750000, -0.500000, 0.750000],
                  [-0.750000, -0.250000, 0.500000], [-1.000000, -0.250000, 0.750000], [-1.000000, 0.000000, 1.000000],
                  [-0.750000, 0.250000, 1.000000], [-0.500000, -1.000000, -0.500000], [-0.250000, -1.000000, -0.250000],
                  [-0.250000, -0.750000, -0.500000], [-0.500000, -0.750000, -0.250000],
                  [-0.500000, -0.500000, 0.000000], [-0.250000, -0.500000, 0.250000], [-0.250000, -0.250000, 0.000000],
                  [-0.500000, -0.250000, 0.250000], [-0.500000, 0.000000, 0.500000], [-0.250000, 0.000000, 0.750000],
                  [-0.250000, 0.250000, 0.500000], [-0.500000, 0.250000, 0.750000], [-0.500000, 0.500000, 1.000000],
                  [-0.250000, 0.500000, 1.250000], [-0.250000, 0.750000, 1.000000], [0.000000, -1.000000, -1.000000],
                  [0.250000, -1.000000, -0.750000], [0.250000, -0.750000, -1.000000], [0.000000, -0.750000, -0.750000],
                  [0.000000, -0.500000, -0.500000], [0.250000, -0.500000, -0.250000], [0.250000, -0.250000, -0.500000],
                  [0.000000, -0.250000, -0.250000], [0.000000, 0.000000, 0.000000], [0.250000, 0.000000, 0.250000],
                  [0.250000, 0.250000, 0.000000], [0.000000, 0.250000, 0.250000], [0.000000, 0.500000, 0.500000],
                  [0.250000, 0.500000, 0.750000], [0.250000, 0.750000, 0.500000], [0.000000, 0.750000, 0.750000],
                  [0.000000, 1.000000, 1.000000], [0.500000, -0.500000, -1.000000], [0.750000, -0.500000, -0.750000],
                  [0.750000, -0.250000, -1.000000], [0.500000, -0.250000, -0.750000], [0.500000, 0.000000, -0.500000],
                  [0.750000, 0.000000, -0.250000], [0.750000, 0.250000, -0.500000], [0.500000, 0.250000, -0.250000],
                  [0.500000, 0.500000, 0.000000], [0.750000, 0.500000, 0.250000], [0.750000, 0.750000, 0.000000],
                  [0.500000, 0.750000, 0.250000], [0.500000, 1.000000, 0.500000], [1.000000, 0.000000, -1.000000],
                  [1.000000, 0.250000, -0.750000], [1.000000, 0.500000, -0.500000], [1.250000, 0.500000, -0.250000],
                  [1.000000, 0.750000, -0.250000], [1.000000, 1.000000, 0.000000], [-0.250000, -1.250000, 0.000000],
                  [-0.500000, -1.250000, 0.250000], [-0.500000, -1.000000, 0.500000], [-0.250000, -1.000000, 0.750000],
                  [-0.250000, -0.750000, 0.500000], [-0.500000, -0.750000, 0.750000], [-0.500000, -0.500000, 1.000000],
                  [-0.250000, -0.500000, 1.250000], [-0.250000, -0.250000, 1.000000], [-0.500000, -0.250000, 1.250000],
                  [0.250000, -1.250000, -0.500000], [0.000000, -1.250000, -0.250000], [0.000000, -1.000000, 0.000000],
                  [0.250000, -1.000000, 0.250000], [0.250000, -0.750000, 0.000000], [0.000000, -0.750000, 0.250000],
                  [0.000000, -0.500000, 0.500000], [0.250000, -0.500000, 0.750000], [0.250000, -0.250000, 0.500000],
                  [0.000000, -0.250000, 0.750000], [0.000000, 0.000000, 1.000000], [0.250000, 0.000000, 1.250000],
                  [0.250000, 0.250000, 1.000000], [0.000000, 0.250000, 1.250000], [0.500000, -1.000000, -0.500000],
                  [0.750000, -1.000000, -0.250000], [0.750000, -0.750000, -0.500000], [0.500000, -0.750000, -0.250000],
                  [0.500000, -0.500000, 0.000000], [0.750000, -0.500000, 0.250000], [0.750000, -0.250000, 0.000000],
                  [0.500000, -0.250000, 0.250000], [0.500000, 0.000000, 0.500000], [0.750000, 0.000000, 0.750000],
                  [0.750000, 0.250000, 0.500000], [0.500000, 0.250000, 0.750000], [0.500000, 0.500000, 1.000000],
                  [1.000000, -0.500000, -0.500000], [1.250000, -0.500000, -0.250000], [1.250000, -0.250000, -0.500000],
                  [1.000000, -0.250000, -0.250000], [1.000000, 0.000000, 0.000000], [1.250000, 0.000000, 0.250000],
                  [1.250000, 0.250000, 0.000000], [1.000000, 0.250000, 0.250000], [1.000000, 0.500000, 0.500000],
                  [0.250000, -1.250000, 0.500000], [0.000000, -1.000000, 1.000000], [0.250000, -0.750000, 1.000000],
                  [0.500000, -1.250000, 0.250000], [0.500000, -1.000000, 0.500000], [0.750000, -0.750000, 0.500000],
                  [0.500000, -0.750000, 0.750000], [0.500000, -0.500000, 1.000000], [0.750000, -0.250000, 1.000000],
                  [0.500000, -0.250000, 1.250000], [1.000000, -1.000000, 0.000000], [1.000000, -0.750000, 0.250000],
                  [1.000000, -0.500000, 0.500000], [1.250000, -0.250000, 0.500000], [1.000000, -0.250000, 0.750000],
                  [1.000000, 0.000000, 1.000000]]

# 4NN
SublatticeList = [1,2,1,0,1,2,3,0,1,2,3,0,1,1,3,0,1,2,3,0,1,2,3,1,0,1,1,2,2,0,1,2,3,0,1,2,3,0,1,2,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,1,3,0,1,2,3,0,1,2,3,0,1,2,3,3,0,1,3,0,1,3,0,1,2,3,0,1,2,3,0,2,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,0,1,2,3,0,1,2,3,0,1,2,3,0,0,3,0,1,3,0,2,3,0,1,2,3,0,1,2,3,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,0,1,2,3,0,1,2,3,0,2,0,2,3,0,2,3,0,2,3,0,3,0,2,3,0]
SublatticeVectors = [[0, 0, 0], [0.25, 0, 0.25], [0.25, 0.25, 0], [0, 0.25, 0.25]]

BravaisLatticeVectors = [[-1.500000, 0.000000, -1.500000], [-1.500000, 0.500000, -1.000000],
                         [-1.500000, 0.500000, -1.000000], [-1.500000, 1.000000, -0.500000],
                         [-1.000000, 0.500000, -1.500000], [-1.000000, 0.500000, -1.500000],
                         [-1.000000, 1.000000, -1.000000], [-1.000000, 1.000000, -1.000000],
                         [-1.000000, 1.000000, -1.000000], [-1.000000, 1.000000, -1.000000],
                         [-1.000000, 1.500000, -0.500000], [-0.500000, 1.000000, -1.500000],
                         [-0.500000, 1.500000, -1.000000], [-2.000000, 0.000000, 0.000000],
                         [-2.000000, 0.000000, 0.000000], [-1.500000, -0.500000, -1.000000],
                         [-1.500000, -0.500000, -1.000000], [-1.500000, -0.500000, -1.000000],
                         [-1.500000, 0.000000, -0.500000], [-1.500000, 0.000000, -0.500000],
                         [-1.500000, 0.000000, -0.500000], [-1.500000, 0.000000, -0.500000],
                         [-1.500000, 0.500000, 0.000000], [-1.500000, 0.500000, 0.000000],
                         [-1.500000, 0.500000, 0.000000], [-1.500000, 0.500000, 0.000000],
                         [-1.500000, 1.000000, 0.500000], [-1.000000, -0.500000, -1.500000],
                         [-1.000000, -0.500000, -1.500000], [-1.000000, -0.500000, -1.500000],
                         [-1.000000, 0.000000, -1.000000], [-1.000000, 0.000000, -1.000000],
                         [-1.000000, 0.000000, -1.000000], [-1.000000, 0.000000, -1.000000],
                         [-1.000000, 0.500000, -0.500000], [-1.000000, 0.500000, -0.500000],
                         [-1.000000, 0.500000, -0.500000], [-1.000000, 0.500000, -0.500000],
                         [-1.000000, 1.000000, 0.000000], [-1.000000, 1.000000, 0.000000],
                         [-1.000000, 1.000000, 0.000000], [-1.000000, 1.000000, 0.000000],
                         [-0.500000, 0.000000, -1.500000], [-0.500000, 0.000000, -1.500000],
                         [-0.500000, 0.000000, -1.500000], [-0.500000, 0.000000, -1.500000],
                         [-0.500000, 0.500000, -1.000000], [-0.500000, 0.500000, -1.000000],
                         [-0.500000, 0.500000, -1.000000], [-0.500000, 0.500000, -1.000000],
                         [-0.500000, 1.000000, -0.500000], [-0.500000, 1.000000, -0.500000],
                         [-0.500000, 1.000000, -0.500000], [-0.500000, 1.000000, -0.500000],
                         [-0.500000, 1.500000, 0.000000], [-0.500000, 1.500000, 0.000000],
                         [-0.500000, 1.500000, 0.000000], [0.000000, 0.000000, -2.000000],
                         [0.000000, 0.000000, -2.000000], [0.000000, 0.500000, -1.500000],
                         [0.000000, 0.500000, -1.500000], [0.000000, 0.500000, -1.500000],
                         [0.000000, 0.500000, -1.500000], [0.000000, 1.000000, -1.000000],
                         [0.000000, 1.000000, -1.000000], [0.000000, 1.000000, -1.000000],
                         [0.000000, 1.000000, -1.000000], [0.000000, 1.500000, -0.500000],
                         [0.000000, 1.500000, -0.500000], [0.000000, 1.500000, -0.500000],
                         [0.500000, 1.000000, -1.500000], [-1.500000, -1.000000, -0.500000],
                         [-1.500000, -1.000000, -0.500000], [-1.500000, -1.000000, -0.500000],
                         [-1.500000, -0.500000, 0.000000], [-1.500000, -0.500000, 0.000000],
                         [-1.500000, -0.500000, 0.000000], [-1.500000, -0.500000, 0.000000],
                         [-1.500000, 0.000000, 0.500000], [-1.500000, 0.000000, 0.500000],
                         [-1.500000, 0.000000, 0.500000], [-1.500000, 0.000000, 0.500000],
                         [-1.500000, 0.500000, 1.000000], [-1.000000, -1.000000, -1.000000],
                         [-1.000000, -1.000000, -1.000000], [-1.000000, -1.000000, -1.000000],
                         [-1.000000, -1.000000, -1.000000], [-1.000000, -0.500000, -0.500000],
                         [-1.000000, -0.500000, -0.500000], [-1.000000, -0.500000, -0.500000],
                         [-1.000000, -0.500000, -0.500000], [-1.000000, 0.000000, 0.000000],
                         [-1.000000, 0.000000, 0.000000], [-1.000000, 0.000000, 0.000000],
                         [-1.000000, 0.000000, 0.000000], [-1.000000, 0.500000, 0.500000],
                         [-1.000000, 0.500000, 0.500000], [-1.000000, 0.500000, 0.500000],
                         [-1.000000, 0.500000, 0.500000], [-1.000000, 1.000000, 1.000000],
                         [-1.000000, 1.000000, 1.000000], [-1.000000, 1.000000, 1.000000],
                         [-0.500000, -1.000000, -1.500000], [-0.500000, -1.000000, -1.500000],
                         [-0.500000, -1.000000, -1.500000], [-0.500000, -0.500000, -1.000000],
                         [-0.500000, -0.500000, -1.000000], [-0.500000, -0.500000, -1.000000],
                         [-0.500000, -0.500000, -1.000000], [-0.500000, 0.000000, -0.500000],
                         [-0.500000, 0.000000, -0.500000], [-0.500000, 0.000000, -0.500000],
                         [-0.500000, 0.000000, -0.500000], [-0.500000, 0.500000, 0.000000],
                         [-0.500000, 0.500000, 0.000000], [-0.500000, 0.500000, 0.000000],
                         [-0.500000, 0.500000, 0.000000], [-0.500000, 1.000000, 0.500000],
                         [-0.500000, 1.000000, 0.500000], [-0.500000, 1.000000, 0.500000],
                         [-0.500000, 1.000000, 0.500000], [0.000000, -0.500000, -1.500000],
                         [0.000000, -0.500000, -1.500000], [0.000000, -0.500000, -1.500000],
                         [0.000000, -0.500000, -1.500000], [0.000000, 0.000000, -1.000000],
                         [0.000000, 0.000000, -1.000000], [0.000000, 0.000000, -1.000000],
                         [0.000000, 0.000000, -1.000000], [0.000000, 0.500000, -0.500000],
                         [0.000000, 0.500000, -0.500000], [0.000000, 0.500000, -0.500000],
                         [0.000000, 0.500000, -0.500000], [0.000000, 1.000000, 0.000000],
                         [0.000000, 1.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 1.000000, 0.000000],
                         [0.000000, 1.500000, 0.500000], [0.000000, 1.500000, 0.500000],
                         [0.500000, 0.000000, -1.500000], [0.500000, 0.000000, -1.500000],
                         [0.500000, 0.000000, -1.500000], [0.500000, 0.000000, -1.500000],
                         [0.500000, 0.500000, -1.000000], [0.500000, 0.500000, -1.000000],
                         [0.500000, 0.500000, -1.000000], [0.500000, 0.500000, -1.000000],
                         [0.500000, 1.000000, -0.500000], [0.500000, 1.000000, -0.500000],
                         [0.500000, 1.000000, -0.500000], [0.500000, 1.000000, -0.500000],
                         [0.500000, 1.500000, 0.000000], [0.500000, 1.500000, 0.000000],
                         [1.000000, 0.500000, -1.500000], [1.000000, 1.000000, -1.000000],
                         [1.000000, 1.000000, -1.000000], [1.000000, 1.000000, -1.000000],
                         [-1.500000, -1.500000, 0.000000], [-1.500000, -1.000000, 0.500000],
                         [-1.500000, -1.000000, 0.500000], [-1.500000, -0.500000, 1.000000],
                         [-1.000000, -1.500000, -0.500000], [-1.000000, -1.500000, -0.500000],
                         [-1.000000, -1.500000, -0.500000], [-1.000000, -1.000000, 0.000000],
                         [-1.000000, -1.000000, 0.000000], [-1.000000, -1.000000, 0.000000],
                         [-1.000000, -1.000000, 0.000000], [-1.000000, -0.500000, 0.500000],
                         [-1.000000, -0.500000, 0.500000], [-1.000000, -0.500000, 0.500000],
                         [-1.000000, -0.500000, 0.500000], [-1.000000, 0.000000, 1.000000],
                         [-1.000000, 0.000000, 1.000000], [-1.000000, 0.000000, 1.000000],
                         [-1.000000, 0.000000, 1.000000], [-0.500000, -1.500000, -1.000000],
                         [-0.500000, -1.500000, -1.000000], [-0.500000, -1.500000, -1.000000],
                         [-0.500000, -1.000000, -0.500000], [-0.500000, -1.000000, -0.500000],
                         [-0.500000, -1.000000, -0.500000], [-0.500000, -1.000000, -0.500000],
                         [-0.500000, -0.500000, 0.000000], [-0.500000, -0.500000, 0.000000],
                         [-0.500000, -0.500000, 0.000000], [-0.500000, -0.500000, 0.000000],
                         [-0.500000, 0.000000, 0.500000], [-0.500000, 0.000000, 0.500000],
                         [-0.500000, 0.000000, 0.500000], [-0.500000, 0.000000, 0.500000],
                         [-0.500000, 0.500000, 1.000000], [-0.500000, 0.500000, 1.000000],
                         [-0.500000, 0.500000, 1.000000], [-0.500000, 0.500000, 1.000000],
                         [0.000000, -1.500000, -1.500000], [0.000000, -1.000000, -1.000000],
                         [0.000000, -1.000000, -1.000000], [0.000000, -1.000000, -1.000000],
                         [0.000000, -1.000000, -1.000000], [0.000000, -0.500000, -0.500000],
                         [0.000000, -0.500000, -0.500000], [0.000000, -0.500000, -0.500000],
                         [0.000000, -0.500000, -0.500000], [0.000000, 0.000000, 0.000000],
                         [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000],
                         [0.000000, 0.500000, 0.500000], [0.000000, 0.500000, 0.500000], [0.000000, 0.500000, 0.500000],
                         [0.000000, 0.500000, 0.500000], [0.000000, 1.000000, 1.000000], [0.000000, 1.000000, 1.000000],
                         [0.000000, 1.000000, 1.000000], [0.000000, 1.000000, 1.000000],
                         [0.500000, -1.000000, -1.500000], [0.500000, -1.000000, -1.500000],
                         [0.500000, -0.500000, -1.000000], [0.500000, -0.500000, -1.000000],
                         [0.500000, -0.500000, -1.000000], [0.500000, -0.500000, -1.000000],
                         [0.500000, 0.000000, -0.500000], [0.500000, 0.000000, -0.500000],
                         [0.500000, 0.000000, -0.500000], [0.500000, 0.000000, -0.500000],
                         [0.500000, 0.500000, 0.000000], [0.500000, 0.500000, 0.000000], [0.500000, 0.500000, 0.000000],
                         [0.500000, 0.500000, 0.000000], [0.500000, 1.000000, 0.500000], [0.500000, 1.000000, 0.500000],
                         [0.500000, 1.000000, 0.500000], [0.500000, 1.000000, 0.500000],
                         [1.000000, -0.500000, -1.500000], [1.000000, 0.000000, -1.000000],
                         [1.000000, 0.000000, -1.000000], [1.000000, 0.000000, -1.000000],
                         [1.000000, 0.000000, -1.000000], [1.000000, 0.500000, -0.500000],
                         [1.000000, 0.500000, -0.500000], [1.000000, 0.500000, -0.500000],
                         [1.000000, 0.500000, -0.500000], [1.000000, 1.000000, 0.000000],
                         [1.000000, 1.000000, 0.000000], [1.000000, 1.000000, 0.000000], [1.000000, 1.000000, 0.000000],
                         [-1.000000, -1.500000, 0.500000], [-1.000000, -1.500000, 0.500000],
                         [-1.000000, -1.000000, 1.000000], [-1.000000, -1.000000, 1.000000],
                         [-1.000000, -1.000000, 1.000000], [-1.000000, -1.000000, 1.000000],
                         [-1.000000, -0.500000, 1.500000], [-0.500000, -1.500000, 0.000000],
                         [-0.500000, -1.500000, 0.000000], [-0.500000, -1.500000, 0.000000],
                         [-0.500000, -1.500000, 0.000000], [-0.500000, -1.000000, 0.500000],
                         [-0.500000, -1.000000, 0.500000], [-0.500000, -1.000000, 0.500000],
                         [-0.500000, -1.000000, 0.500000], [-0.500000, -0.500000, 1.000000],
                         [-0.500000, -0.500000, 1.000000], [-0.500000, -0.500000, 1.000000],
                         [-0.500000, -0.500000, 1.000000], [-0.500000, 0.000000, 1.500000],
                         [-0.500000, 0.000000, 1.500000], [-0.500000, 0.000000, 1.500000],
                         [0.000000, -1.500000, -0.500000], [0.000000, -1.500000, -0.500000],
                         [0.000000, -1.500000, -0.500000], [0.000000, -1.500000, -0.500000],
                         [0.000000, -1.000000, 0.000000], [0.000000, -1.000000, 0.000000],
                         [0.000000, -1.000000, 0.000000], [0.000000, -1.000000, 0.000000],
                         [0.000000, -0.500000, 0.500000], [0.000000, -0.500000, 0.500000],
                         [0.000000, -0.500000, 0.500000], [0.000000, -0.500000, 0.500000],
                         [0.000000, 0.000000, 1.000000], [0.000000, 0.000000, 1.000000], [0.000000, 0.000000, 1.000000],
                         [0.000000, 0.000000, 1.000000], [0.000000, 0.500000, 1.500000], [0.000000, 0.500000, 1.500000],
                         [0.500000, -1.500000, -1.000000], [0.500000, -1.500000, -1.000000],
                         [0.500000, -1.000000, -0.500000], [0.500000, -1.000000, -0.500000],
                         [0.500000, -1.000000, -0.500000], [0.500000, -1.000000, -0.500000],
                         [0.500000, -0.500000, 0.000000], [0.500000, -0.500000, 0.000000],
                         [0.500000, -0.500000, 0.000000], [0.500000, -0.500000, 0.000000],
                         [0.500000, 0.000000, 0.500000], [0.500000, 0.000000, 0.500000], [0.500000, 0.000000, 0.500000],
                         [0.500000, 0.000000, 0.500000], [0.500000, 0.500000, 1.000000], [0.500000, 0.500000, 1.000000],
                         [0.500000, 0.500000, 1.000000], [0.500000, 0.500000, 1.000000],
                         [1.000000, -1.000000, -1.000000], [1.000000, -1.000000, -1.000000],
                         [1.000000, -1.000000, -1.000000], [1.000000, -1.000000, -1.000000],
                         [1.000000, -0.500000, -0.500000], [1.000000, -0.500000, -0.500000],
                         [1.000000, -0.500000, -0.500000], [1.000000, -0.500000, -0.500000],
                         [1.000000, 0.000000, 0.000000], [1.000000, 0.000000, 0.000000], [1.000000, 0.000000, 0.000000],
                         [1.000000, 0.000000, 0.000000], [1.000000, 0.500000, 0.500000], [1.000000, 0.500000, 0.500000],
                         [1.000000, 0.500000, 0.500000], [1.000000, 0.500000, 0.500000], [1.000000, 1.000000, 1.000000],
                         [1.500000, -0.500000, -1.000000], [1.500000, 0.000000, -0.500000],
                         [1.500000, 0.000000, -0.500000], [1.500000, 0.000000, -0.500000],
                         [1.500000, 0.500000, 0.000000], [1.500000, 0.500000, 0.000000],
                         [-0.500000, -1.500000, 1.000000], [-0.500000, -1.000000, 1.500000],
                         [0.000000, -2.000000, 0.000000], [0.000000, -2.000000, 0.000000],
                         [0.000000, -1.500000, 0.500000], [0.000000, -1.500000, 0.500000],
                         [0.000000, -1.500000, 0.500000], [0.000000, -1.500000, 0.500000],
                         [0.000000, -1.000000, 1.000000], [0.000000, -1.000000, 1.000000],
                         [0.000000, -1.000000, 1.000000], [0.000000, -1.000000, 1.000000],
                         [0.000000, -0.500000, 1.500000], [0.000000, -0.500000, 1.500000],
                         [0.000000, -0.500000, 1.500000], [0.500000, -1.500000, 0.000000],
                         [0.500000, -1.500000, 0.000000], [0.500000, -1.500000, 0.000000],
                         [0.500000, -1.500000, 0.000000], [0.500000, -1.000000, 0.500000],
                         [0.500000, -1.000000, 0.500000], [0.500000, -1.000000, 0.500000],
                         [0.500000, -1.000000, 0.500000], [0.500000, -0.500000, 1.000000],
                         [0.500000, -0.500000, 1.000000], [0.500000, -0.500000, 1.000000],
                         [0.500000, -0.500000, 1.000000], [0.500000, 0.000000, 1.500000],
                         [0.500000, 0.000000, 1.500000], [1.000000, -1.500000, -0.500000],
                         [1.000000, -1.000000, 0.000000], [1.000000, -1.000000, 0.000000],
                         [1.000000, -1.000000, 0.000000], [1.000000, -1.000000, 0.000000],
                         [1.000000, -0.500000, 0.500000], [1.000000, -0.500000, 0.500000],
                         [1.000000, -0.500000, 0.500000], [1.000000, -0.500000, 0.500000],
                         [1.000000, 0.000000, 1.000000], [1.000000, 0.000000, 1.000000], [1.000000, 0.000000, 1.000000],
                         [1.000000, 0.000000, 1.000000], [1.500000, -1.000000, -0.500000],
                         [1.500000, -0.500000, 0.000000], [1.500000, -0.500000, 0.000000],
                         [1.500000, -0.500000, 0.000000], [1.500000, 0.000000, 0.500000],
                         [1.500000, 0.000000, 0.500000], [0.500000, -1.500000, 1.000000],
                         [1.000000, -1.500000, 0.500000], [1.000000, -1.000000, 1.000000],
                         [1.000000, -1.000000, 1.000000], [1.000000, -1.000000, 1.000000]]

numSites = len(LatticeVectors)

# Normed vectors that define the order parameter of the SFM order
nSFM = [[-1 / np.sqrt(2), -1 / np.sqrt(2), 0], [-1 / np.sqrt(2), 1 / np.sqrt(2), 0],
        [1 / np.sqrt(2), 1 / np.sqrt(2), 0], [1 / np.sqrt(2), -1 / np.sqrt(2), 0]]
# Normed vectors that define the order parameter of the psi_3 order
npsi3b = [[-1 / np.sqrt(2), 1 / np.sqrt(2), 0], [1 / np.sqrt(2), 1 / np.sqrt(2), 0],
          [1 / np.sqrt(2), -1 / np.sqrt(2), 0], [-1 / np.sqrt(2), -1 / np.sqrt(2), 0]]
npsi3 = [[0, -1 / np.sqrt(2), 1 / np.sqrt(2)], [0, -1 / np.sqrt(2), -1 / np.sqrt(2)],
         [0, 1 / np.sqrt(2), 1 / np.sqrt(2)], [0, 1 / np.sqrt(2), -1 / np.sqrt(2)]]
npsi3c = [[1 / np.sqrt(2), 0, -1 / np.sqrt(2)], [-1 / np.sqrt(2), 0, 1 / np.sqrt(2)],
          [-1 / np.sqrt(2), 0, -1 / np.sqrt(2)], [1 / np.sqrt(2), 0, 1 / np.sqrt(2)]]
# Normed vectors that define the order parameter of the psi_2 order
npsi2b = [[-1 / np.sqrt(6), -1 / np.sqrt(6), np.sqrt(2 / 3)], [1 / np.sqrt(6), -1 / np.sqrt(6), -np.sqrt(2 / 3)],
          [1 / np.sqrt(6), 1 / np.sqrt(6), np.sqrt(2 / 3)], [-1 / np.sqrt(6), 1 / np.sqrt(6), -np.sqrt(2 / 3)]]
npsi2 = [[np.sqrt(2 / 3), -1 / np.sqrt(6), -1 / np.sqrt(6)], [-np.sqrt(2 / 3), -1 / np.sqrt(6), 1 / np.sqrt(6)],
         [-np.sqrt(2 / 3), 1 / np.sqrt(6), -1 / np.sqrt(6)], [np.sqrt(2 / 3), 1 / np.sqrt(6), 1 / np.sqrt(6)]]
npsi2c = [[-1 / np.sqrt(6), np.sqrt(2 / 3), -1 / np.sqrt(6)], [1 / np.sqrt(6), np.sqrt(2 / 3), 1 / np.sqrt(6)],
          [1 / np.sqrt(6), -np.sqrt(2 / 3), -1 / np.sqrt(6)], [-1 / np.sqrt(6), -np.sqrt(2 / 3), 1 / np.sqrt(6)]]
# Normed vectors that define the order parameter of the Palmer-Chalker order
npalmerchalker = [[0, -1 / np.sqrt(2), 1 / np.sqrt(2)], [0, 1 / np.sqrt(2), 1 / np.sqrt(2)],
                  [0, -1 / np.sqrt(2), -1 / np.sqrt(2)], [0, 1 / np.sqrt(2), -1 / np.sqrt(2)]]
# Normed vectors that define the order parameter of the All-in all-out order
naiao = [[1 / np.sqrt(3), 1 / np.sqrt(3), 1 / np.sqrt(3)], [-1 / np.sqrt(3), 1 / np.sqrt(3), -1 / np.sqrt(3)],
         [-1 / np.sqrt(3), -1 / np.sqrt(3), 1 / np.sqrt(3)], [1 / np.sqrt(3), -1 / np.sqrt(3), -1 / np.sqrt(3)]]

nice = [[1 / np.sqrt(3), 1 / np.sqrt(3), 1 / np.sqrt(3)], [-1 / np.sqrt(3), 1 / np.sqrt(3), -1 / np.sqrt(3)],
         [1 / np.sqrt(3), 1 / np.sqrt(3), -1 / np.sqrt(3)], [-1 / np.sqrt(3), 1 / np.sqrt(3), 1 / np.sqrt(3)]]

nplanar = [[2 / np.sqrt(6), -1 / np.sqrt(6), -1 / np.sqrt(6)], [2 / np.sqrt(6), 1 / np.sqrt(6), -1 / np.sqrt(6)],
         [2 / np.sqrt(6), -1 / np.sqrt(6), 1 / np.sqrt(6)], [2 / np.sqrt(6), 1 / np.sqrt(6), 1 / np.sqrt(6)]]

# n-vectors rotated by pi/2 in the corresponding gs manifolds
mpsi3 = [[-1 / np.sqrt(2), 1 / np.sqrt(2), 0], [1 / np.sqrt(2), 1 / np.sqrt(2), 0],
         [1 / np.sqrt(2), -1 / np.sqrt(2), 0], [-1 / np.sqrt(2), -1 / np.sqrt(2), 0]]
mpsi2 = [[1 / np.sqrt(2), -1 / np.sqrt(2), 0], [-1 / np.sqrt(2), -1 / np.sqrt(2), 0],
         [-1 / np.sqrt(2), 1 / np.sqrt(2), 0], [1 / np.sqrt(2), 1 / np.sqrt(2), 0]]

nx = [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]]
ny = [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]]
nz = [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]]

nxlocal = [[-2, 1, 1] / np.sqrt(6), [2, 1, -1] / np.sqrt(6), [2, -1, 1] / np.sqrt(6), [-2, -1, -1] / np.sqrt(6)]
nylocal = [[0, -1, 1] / np.sqrt(2), [0, -1, -1] / np.sqrt(2), [0, 1, 1] / np.sqrt(2), [0, 1, -1] / np.sqrt(2)]
nzlocal = [[1, 1, 1] / np.sqrt(3), [-1, 1, -1] / np.sqrt(3), [-1, -1, 1] / np.sqrt(3), [1, -1, -1] / np.sqrt(3)]

# Matrices which transform from the global to the local coordinate system
R0 = [[-np.sqrt((2 / 3)), 1 / np.sqrt(6), 1 / np.sqrt(6)], [0, -(1 / np.sqrt(2)), 1 / np.sqrt(2)],
      [1 / np.sqrt(3), 1 / np.sqrt(3), 1 / np.sqrt(3)]]
R1 = [[np.sqrt(2 / 3), 1 / np.sqrt(6), -(1 / np.sqrt(6))], [0, -(1 / np.sqrt(2)), -(1 / np.sqrt(2))],
      [-(1 / np.sqrt(3)), 1 / np.sqrt(3), -(1 / np.sqrt(3))]]
R2 = [[np.sqrt(2 / 3), -(1 / np.sqrt(6)), 1 / np.sqrt(6)], [0, 1 / np.sqrt(2), 1 / np.sqrt(2)],
      [-(1 / np.sqrt(3)), -(1 / np.sqrt(3)), 1 / np.sqrt(3)]]
R3 = [[-np.sqrt((2 / 3)), -(1 / np.sqrt(6)), -(1 / np.sqrt(6))], [0, 1 / np.sqrt(2), -(1 / np.sqrt(2))],
      [1 / np.sqrt(3), -(1 / np.sqrt(3)), -(1 / np.sqrt(3))]]

RToLoc = [R0, R1, R2, R3]


def Utrafo1(b):
    if b == 0:
        return 1
    if b == 1:
        return 0
    if b == 2:
        return 3
    return 2


def Utrafo2(b):
    if b == 0:
        return 2
    if b == 1:
        return 3
    if b == 2:
        return 0
    return 1


def Utrafo3(b):
    if b == 0:
        return 3
    if b == 1:
        return 2
    if b == 2:
        return 1
    return 0


def Trafofactor1(mu, nu):
    if ((mu == 1) and (nu != 1)) or ((mu != 1) and (nu == 1)):
        return -1
    return 1


def Trafofactor2(mu, nu):
    if ((mu == 2) and (nu != 2)) or ((mu != 2) and (nu == 2)):
        return -1
    return 1


def Trafofactor3(mu, nu):
    if ((mu == 0) and (nu != 0)) or ((mu != 0) and (nu == 0)):
        return -1
    return 1

# Compute order parameter susceptibility flows
if True:
    maxFlowvalue = 0
    minFlowvalue = 10
    m = 5
    sus = np.zeros(len(values))
    lamArray = np.zeros(len(values))
    lamArray3 = np.zeros(len(values))
    susmin = np.zeros(len(values))
    sus2 = np.zeros(len(values))
    sus3 = np.zeros(len(values))
    sus4 = np.zeros(len(values))
    sus5 = np.zeros(len(values))
    sus6 = np.zeros(len(values))

    OutputPos = 263

    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
               [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
               [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
               ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0
            if p != 0: continue
            for mu in range(3):
                for nu in range(3):

                    for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              nSFM[0][mu] * nSFM[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              nSFM[1][mu] * nSFM[Utrafo1(SublatticeList[l])][nu]
                              + Trafofactor2(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              nSFM[2][mu] * nSFM[Utrafo2(SublatticeList[l])][nu]
                              + Trafofactor3(mu, nu) * math.cos(
                            LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              nSFM[3][mu] * nSFM[Utrafo3(SublatticeList[l])][nu]) * \
                             row[mu][nu][l] / 4
                        # Hier Fehler, da in falscher Schleife?

                        # Test spin correlations within first unti cell
                        '''if i == OutputPos and j == 0 and t == 0 and p == 0:
                            if (LatticeVectors[l][0] == 0 and LatticeVectors[l][1] == 0.25 and LatticeVectors[l][2] == 0.25):
                                print("(0,0.25,0.25): " + str(row[l]))
                            if (LatticeVectors[l][0] == 0.25 and LatticeVectors[l][1] == 0.25 and LatticeVectors[l][
                                2] == 0):
                                print("(0.25,0.25,0): " + str(row[l]))
                            if (LatticeVectors[l][0] == 0.25 and LatticeVectors[l][1] == 0 and LatticeVectors[l][2] == 0.25):
                                print("(0.25,0,0.25): " + str(row[l]))'''

            if v > sus[i]:
                sus[i] = v
                kmax_y = ky
                kmax_z = kz
            if v < susmin[i]: susmin[i] = v
    if maxFlowvalue < sus[i]: maxFlowvalue = sus[i]

    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
               [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
               [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
               ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0

            if p != 0: continue
            for mu in range(3):
                for nu in range(3):

                    for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              npsi3[0][mu] * npsi3[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              npsi3[1][mu] * npsi3[Utrafo1(SublatticeList[l])][nu]
                              + Trafofactor2(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              npsi3[2][mu] * npsi3[Utrafo2(SublatticeList[l])][nu]
                              + Trafofactor3(mu, nu) * math.cos(
                            LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              npsi3[3][mu] * npsi3[Utrafo3(SublatticeList[l])][nu]) * \
                             row[mu][nu][l] / 4

            if v > sus2[i]:
                sus2[i] = v
                kmax_y = ky
                kmax_z = kz
            if v < susmin[i]: susmin[i] = v
    if maxFlowvalue < sus[i]: maxFlowvalue = sus[i]

    n3 = naiao
    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
               [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
               [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
               ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0
            if p != 0: continue
            for mu in range(3):
                for nu in range(3):

                    for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              n3[0][mu] * n3[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              n3[1][mu] * n3[Utrafo1(SublatticeList[l])][nu]
                              + Trafofactor2(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              n3[2][mu] * n3[Utrafo2(SublatticeList[l])][nu]
                              + Trafofactor3(mu, nu) * math.cos(
                            LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              n3[3][mu] * n3[Utrafo3(SublatticeList[l])][nu]) * \
                             row[mu][nu][l] / 4


            if v > sus3[i]:
                sus3[i] = v
                kmax_y = ky
                kmax_z = kz
            if v < susmin[i]: susmin[i] = v
    if maxFlowvalue < sus[i]: maxFlowvalue = sus[i]

    nvec4 = nplanar
    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
               [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
               [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
               ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0
            if p != 0: continue
            for mu in range(3):
                for nu in range(3):

                    for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              nvec4[0][mu] * nvec4[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              nvec4[1][mu] * nvec4[Utrafo1(SublatticeList[l])][nu]
                              + Trafofactor2(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              nvec4[2][mu] * nvec4[Utrafo2(SublatticeList[l])][nu]
                              + Trafofactor3(mu, nu) * math.cos(
                            LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              nvec4[3][mu] * nvec4[Utrafo3(SublatticeList[l])][nu]) * \
                             row[mu][nu][l] / 4

            if v > sus4[i]:
                sus4[i] = v


    n5 = npalmerchalker#naiao
    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
               [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
               [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
               ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0
            if p != 0: continue
            for mu in range(3):
                for nu in range(3):

                    for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              n5[0][mu] * n5[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][
                                2] * kz) * n5[1][mu] * n5[Utrafo1(SublatticeList[l])][nu]
                              + Trafofactor2(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][
                                2] * kz) * n5[2][mu] * n5[Utrafo2(SublatticeList[l])][nu]
                              + Trafofactor3(mu, nu) * math.cos(
                            LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              n5[3][mu] * n5[Utrafo3(SublatticeList[l])][nu]) * \
                             row[mu][nu][l] / 4

            if v > sus5[i]:
                sus5[i] = v

    for i in range(len(values)):
        susmin[i] = 10
        lamArray[i] = lams[i][0]

        row = [[valuesMat[0][0][i], valuesMat[0][1][i], valuesMat[0][2][i]],
                       [valuesMat[1][0][i], valuesMat[1][1][i], valuesMat[1][2][i]],
                       [valuesMat[2][0][i], valuesMat[2][1][i], valuesMat[2][2][i]]
                       ]

        for p in range(m + 1):
            j = 0
            t = 0
            kx = 0
            ky = 0
            kz = 0
            v = 0
            if p != 0: continue
            for mu in range(3):
                for nu in range(3):
                     for l in range(numSites):
                        v += (math.cos(
                            LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky + LatticeVectors[l][2] * kz) *
                              nice[0][mu] * nice[SublatticeList[l]][nu]
                              + Trafofactor1(mu, nu) * math.cos(
                            -LatticeVectors[l][0] * kx + LatticeVectors[l][1] * ky - LatticeVectors[l][
                                    2] * kz) * nice[1][mu] * nice[Utrafo1(SublatticeList[l])][
                                      nu]
                                  + Trafofactor2(mu, nu) * math.cos(
                                -LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky + LatticeVectors[l][
                                    2] * kz) * nice[2][mu] * nice[Utrafo2(SublatticeList[l])][
                                      nu]
                                  + Trafofactor3(mu, nu) * math.cos(
                                LatticeVectors[l][0] * kx - LatticeVectors[l][1] * ky - LatticeVectors[l][2] * kz) *
                              nice[3][mu] * nice[Utrafo3(SublatticeList[l])][nu]) * \
                                 row[mu][nu][l] / 4

            if v > sus6[i]: sus6[i] = v

    plt.figure(3,figsize=(9.4,4.2))
    plt.rcParams.update({'font.size': 24})

    orangeHex = '#ff7f0e'
    blueHex = '#1f77b4'
    darkblueHex = '#7995e9'
    lightBlueHex3 = '#61b1ff'
    greenHex = '#2ca02c'
    redHex = '#d62728'
    brownHex = 'C5'
    lilaHex = '#891a88'
    lightBlueHex = '#61b1ff'
    lightBlueHex2 = '#a7d3ffff'
    darkBlueHex = '#7995e9'
    blackHex = '#000000'

    blackIce = '#0e0e0e'
    redXY='#ff0000'
    blueE='#0000ff'
    greenT2='#018001'
    purpleA2 ='#800080'


    jzz = 3
    lams3= np.zeros(len(lams))
    for i in range(len(lams)):
        lams3[i] = jzz*lams[i][0]

    print(len(lams))
    print(len(sus3))
    plt.plot(lams3, sus2, linewidth=4.0, color=blueE)
    plt.plot(lams3, sus6, linewidth=4.0, color=redXY)
    plt.plot(lams3, sus4, linewidth=4.0, color=blackIce)
    plt.plot(lams3, sus5, linewidth=4.0, color=greenT2)
    plt.plot(lams3, sus3, linewidth=4.0, color=purpleA2)


    labelFontsize = 24

    plt.yticks(fontname=ticksFont)
    plt.xticks(fontname=ticksFont)
    plt.xlim(0,2)
    plt.xticks([0,0.5,1.0,1.5,2.0])

    plt.ylabel(r'$\bar{\chi}_{\psi}$', fontsize=labelFontsize)
    plt.xlabel('$\Lambda$', fontsize=labelFontsize)
    plt.gcf().subplots_adjust(left=0.15)
    plt.rcParams.update({'font.size': 20})
    plt.legend([r'$\bar{\chi}_{E}$', r'$\bar{\chi}_{T_{1}^{Ice}}$', r'$\bar{\chi}_{T_{1}^{xy}}$',r'$\bar{\chi}_{T_{2}}$',r'$\bar{\chi}_{A_2}$'],loc='upper right', ncol=3,fontsize=labelFontsize,handlelength=1)


    plt.savefig(path + 'specificOrderFlow.pdf', bbox_inches='tight')
    plt.savefig(path + 'specificOrderFlow.png', bbox_inches='tight')

    plt.show()



SFcmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ["midnightblue", "royalblue", "orange", "red"])

# Plot SF and NSF structure factors with included g-factors
if True:
    try:
        os.mkdir(path + 'Plots')
    except OSError:
        print("Creation of the directory %s failed" % path)

    m = 100
    krange = 8
    krangex = krange
    krangey = krange
    distortion = pi
    distortionhh = distortion
    distortionl = distortion
    sus = np.zeros(len(values))

    nspecificOrder = nzlocal


    # [hk0] vectors
    e1 = [distortion, 0, 0]
    e2 = [0, distortion, 0]
    zsc = [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]]
    aspectRatio = 1
    planeString = 'hk0'
    xlabel = '$[h00]$'
    ylabel = '$[0k0]$'
    # [hhl] vectors
    #Comment out the next seven lines to plot the [hk0] plane
    e1 = [distortionhh, distortionhh, 0]
    e2 = [0, 0, distortionl]
    zsc = [[-1, 1, 0] / np.sqrt(2), [-1, 1, 0] / np.sqrt(2), [-1, 1, 0] / np.sqrt(2), [-1, 1, 0] / np.sqrt(2)]
    aspectRatio = 1 / np.sqrt(2)
    planeString = 'hhl'
    xlabel = '$[hh0]$'
    ylabel = '$[00l]$'

    # Specify g-factors
    g_z = 1
    g_xy = 1

    t = 0
    # Rotate by t about (010)
    Ry = np.array([[np.cos(t), 0, np.sin(t)], [0, 1, 0], [-np.sin(t), 0, np.cos(t)]])
    RyT = Ry.transpose()

    zscProjected = np.zeros((4, 3))
    for i in range(4):
        zscProjected[i] = g_z * nzlocal[i] * np.dot(zsc[i], nzlocal[i]) + g_xy * (
        zsc[i] - nzlocal[i] * np.dot(zsc[i], nzlocal[i]))

    SigmaNSF = np.zeros((m, m))
    SigmaSF = np.zeros((m, m))
    SigmaFull = np.zeros((m, m))
    gx = np.zeros((m))
    gy = np.zeros((m))

    print(numSites)
    print(len(LatticeVectors))

    L = -1  #getNLam(0, lams)
    row = [[valuesMat[0][0][L], valuesMat[0][1][L], valuesMat[0][2][L]],
           [valuesMat[1][0][L], valuesMat[1][1][L], valuesMat[1][2][L]],
           [valuesMat[2][0][L], valuesMat[2][1][L], valuesMat[2][2][L]]
           ]

    for i in range(m):
        for j in range(m):
            n1 = -krangey + 2 * krangey / (m - 1) * i
            n2 = -krangex + 2 * krangex / (m - 1) * j
            gx[i] = n1 / 2
            gy[j] = n2 / 2
            v = 0

            kvec = [n1 * e1[0] + n2 * e2[0], n1 * e1[1] + n2 * e2[1], n1 * e1[2] + n2 * e2[2]]
            xsc = kvec / np.linalg.norm(kvec)
            ytemp = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
            ysc = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
            for n in range(4):
                ytemp[n] = np.cross(zsc[n], xsc) / np.linalg.norm(np.cross(zsc[n], xsc))
                ysc[n] = g_z * nzlocal[n] * np.dot(ytemp[n], nzlocal[n]) + g_xy * (
                ytemp[n] - nzlocal[n] * np.dot(ytemp[n], nzlocal[n]))

            for l in range(numSites):
                chi0SF = 0
                chi1SF = 0
                chi2SF = 0
                chi3SF = 0
                chi0NSF = 0
                chi1NSF = 0
                chi2NSF = 0
                chi3NSF = 0

                for mu in range(3):
                    for nu in range(3):
                        rowl = np.array([[row[0][0][l], row[0][1][l], row[0][2][l]],
                                         [row[1][0][l], row[1][1][l], row[1][2][l]],
                                         [row[2][0][l], row[2][1][l], row[2][2][l]]])

                        chi0SF += ysc[0][mu] * ysc[SublatticeList[l]][nu] * rowl[mu][nu]
                        chi1SF += Trafofactor1(mu, nu) * ysc[1][mu] * ysc[Utrafo1(SublatticeList[l])][nu] * rowl[mu][nu]
                        chi2SF += Trafofactor2(mu, nu) * ysc[2][mu] * ysc[Utrafo2(SublatticeList[l])][nu] * rowl[mu][nu]
                        chi3SF += Trafofactor3(mu, nu) * ysc[3][mu] * ysc[Utrafo3(SublatticeList[l])][nu] * rowl[mu][nu]

                        chi0NSF += zscProjected[0][mu] * zscProjected[SublatticeList[l]][nu] * rowl[mu][nu]
                        chi1NSF += Trafofactor1(mu, nu) * zscProjected[1][mu] * \
                                   zscProjected[Utrafo1(SublatticeList[l])][nu] * rowl[mu][nu]
                        chi2NSF += Trafofactor2(mu, nu) * zscProjected[2][mu] * \
                                   zscProjected[Utrafo2(SublatticeList[l])][nu] * rowl[mu][nu]
                        chi3NSF += Trafofactor3(mu, nu) * zscProjected[3][mu] * \
                                   zscProjected[Utrafo3(SublatticeList[l])][nu] * rowl[mu][nu]


                SigmaSF[j][i] += (math.cos(
                    LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) + LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) + LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi0SF
                                  + math.cos(
                    -LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) + LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) - LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi1SF
                                  + math.cos(
                    -LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) - LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) + LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi2SF
                                  + math.cos(
                    LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) - LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) - LatticeVectors[l][2] * (
                        n1 * e1[2] + n2 * e2[2])) * chi3SF) / 4

                SigmaNSF[j][i] += (math.cos(
                    LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) + LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) + LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi0NSF
                                   + math.cos(
                    -LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) + LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) - LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi1NSF
                                   + math.cos(
                    -LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) - LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) + LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi2NSF
                                   + math.cos(
                    LatticeVectors[l][0] * (n1 * e1[0] + n2 * e2[0]) - LatticeVectors[l][1] * (
                        n1 * e1[1] + n2 * e2[1]) - LatticeVectors[l][2] * (n1 * e1[2] + n2 * e2[2])) * chi3NSF) / 4

            SigmaFull[j][i] = SigmaSF[j][i] + SigmaNSF[j][i]

    plt.figure(13)
    fontsize = 36
    plt.gca().set_aspect(aspectRatio)
    plt.contourf(gx, gy, SigmaNSF, 20, cmap=SFcmap)

    cbar = plt.colorbar(fraction=0.047 * aspectRatio)
    cbar.ax.tick_params(labelsize=fontsize)
    plt.xlabel(xlabel, fontsize=fontsize)
    plt.ylabel(ylabel, fontsize=fontsize)
    plt.xticks([-2, 0, 2], fontsize=fontsize)
    plt.yticks([-2, 0, 2], fontsize=fontsize)

    folder_path = path + "Plots"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)


    plt.figure(14)
    plt.gca().set_aspect(aspectRatio)
    plt.contourf(gx, gy, SigmaSF, 20, cmap=SFcmap)

    cbar = plt.colorbar(fraction=0.047 * aspectRatio)
    cbar.ax.tick_params(labelsize=fontsize)
    plt.xlabel(xlabel, fontsize=fontsize)
    plt.ylabel(ylabel, fontsize=fontsize)
    plt.xticks([-2, 0, 2], fontsize=fontsize)
    plt.yticks([-2, 0, 2], fontsize=fontsize)


    plt.figure(15)
    plt.gca().set_aspect(aspectRatio)
    plt.contourf(gx, gy, SigmaFull, 20, cmap=SFcmap)
    # plt.colorbar(fraction=0.047 * aspectRatio)
    cbar = plt.colorbar(fraction=0.047 * aspectRatio, ticks=[0,1,2,3,4,5,6,7,8,9,10])
    #cbar = plt.colorbar(fraction=0.047 * aspectRatio)
    cbar.ax.tick_params(labelsize=fontsize)
    plt.xlabel(xlabel, fontsize=fontsize)
    plt.ylabel(ylabel, fontsize=fontsize)
    plt.xticks([-2, 0, 2], fontsize=fontsize)
    plt.yticks([-2, 0, 2], fontsize=fontsize)

    # plt.savefig(path + 'Plots/gFactorNeutronSF' + planeString + '_L' + str(lams[L][0]) + '.pdf', bbox_inches='tight')
    # plt.savefig(path + 'Plots/gFactorNeutronSF' + planeString + '_L' + str(lams[L][0]) + '.png', bbox_inches='tight')

    plt.show()